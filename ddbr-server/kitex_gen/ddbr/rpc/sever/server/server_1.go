// Code generated by Kitex v0.12.1. DO NOT EDIT.

package server

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	sever "zhamghaoran/ddbr-server/kitex_gen/ddbr/rpc/sever"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"requestVote": kitex.NewMethodInfo(
		requestVoteHandler,
		newServerRequestVoteArgs,
		newServerRequestVoteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"appendEntries": kitex.NewMethodInfo(
		appendEntriesHandler,
		newServerAppendEntriesArgs,
		newServerAppendEntriesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"heartBeat": kitex.NewMethodInfo(
		heartBeatHandler,
		newServerHeartBeatArgs,
		newServerHeartBeatResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	serverServiceInfo                = NewServiceInfo()
	serverServiceInfoForClient       = NewServiceInfoForClient()
	serverServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return serverServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return serverServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return serverServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "Server"
	handlerType := (*sever.Server)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "sever",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func requestVoteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sever.ServerRequestVoteArgs)
	realResult := result.(*sever.ServerRequestVoteResult)
	success, err := handler.(sever.Server).RequestVote(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServerRequestVoteArgs() interface{} {
	return sever.NewServerRequestVoteArgs()
}

func newServerRequestVoteResult() interface{} {
	return sever.NewServerRequestVoteResult()
}

func appendEntriesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sever.ServerAppendEntriesArgs)
	realResult := result.(*sever.ServerAppendEntriesResult)
	success, err := handler.(sever.Server).AppendEntries(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServerAppendEntriesArgs() interface{} {
	return sever.NewServerAppendEntriesArgs()
}

func newServerAppendEntriesResult() interface{} {
	return sever.NewServerAppendEntriesResult()
}

func heartBeatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sever.ServerHeartBeatArgs)
	realResult := result.(*sever.ServerHeartBeatResult)
	success, err := handler.(sever.Server).HeartBeat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServerHeartBeatArgs() interface{} {
	return sever.NewServerHeartBeatArgs()
}

func newServerHeartBeatResult() interface{} {
	return sever.NewServerHeartBeatResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RequestVote(ctx context.Context, req *sever.RequestVoteReq) (r *sever.RequestVoteResp, err error) {
	var _args sever.ServerRequestVoteArgs
	_args.Req = req
	var _result sever.ServerRequestVoteResult
	if err = p.c.Call(ctx, "requestVote", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AppendEntries(ctx context.Context, req *sever.AppendEntriesReq) (r *sever.AppendEntriesResp, err error) {
	var _args sever.ServerAppendEntriesArgs
	_args.Req = req
	var _result sever.ServerAppendEntriesResult
	if err = p.c.Call(ctx, "appendEntries", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HeartBeat(ctx context.Context, req *sever.HeartbeatReq) (r *sever.Heartbeatresp, err error) {
	var _args sever.ServerHeartBeatArgs
	_args.Req = req
	var _result sever.ServerHeartBeatResult
	if err = p.c.Call(ctx, "heartBeat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
