// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package sever

import (
	"context"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"strings"
	"zhamghaoran/ddbr-server/kitex_gen/ddbr/rpc/common"
)

type RequestVoteReq struct {
	Term         int64 `thrift:"term,1" frugal:"1,default,i64" json:"term"`
	CandidateId  int64 `thrift:"candidateId,2" frugal:"2,default,i64" json:"candidateId"`
	LastLogIndex int64 `thrift:"lastLogIndex,3" frugal:"3,default,i64" json:"lastLogIndex"`
	LastLogTerm  int64 `thrift:"lastLogTerm,4" frugal:"4,default,i64" json:"lastLogTerm"`
}

func NewRequestVoteReq() *RequestVoteReq {
	return &RequestVoteReq{}
}

func (p *RequestVoteReq) InitDefault() {
}

func (p *RequestVoteReq) GetTerm() (v int64) {
	return p.Term
}

func (p *RequestVoteReq) GetCandidateId() (v int64) {
	return p.CandidateId
}

func (p *RequestVoteReq) GetLastLogIndex() (v int64) {
	return p.LastLogIndex
}

func (p *RequestVoteReq) GetLastLogTerm() (v int64) {
	return p.LastLogTerm
}
func (p *RequestVoteReq) SetTerm(val int64) {
	p.Term = val
}
func (p *RequestVoteReq) SetCandidateId(val int64) {
	p.CandidateId = val
}
func (p *RequestVoteReq) SetLastLogIndex(val int64) {
	p.LastLogIndex = val
}
func (p *RequestVoteReq) SetLastLogTerm(val int64) {
	p.LastLogTerm = val
}

var fieldIDToName_RequestVoteReq = map[int16]string{
	1: "term",
	2: "candidateId",
	3: "lastLogIndex",
	4: "lastLogTerm",
}

func (p *RequestVoteReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RequestVoteReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RequestVoteReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}
func (p *RequestVoteReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CandidateId = _field
	return nil
}
func (p *RequestVoteReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LastLogIndex = _field
	return nil
}
func (p *RequestVoteReq) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LastLogTerm = _field
	return nil
}

func (p *RequestVoteReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RequestVoteReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RequestVoteReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("term", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RequestVoteReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("candidateId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CandidateId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RequestVoteReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("lastLogIndex", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LastLogIndex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RequestVoteReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("lastLogTerm", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LastLogTerm); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *RequestVoteReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestVoteReq(%+v)", *p)

}

func (p *RequestVoteReq) DeepEqual(ano *RequestVoteReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Term) {
		return false
	}
	if !p.Field2DeepEqual(ano.CandidateId) {
		return false
	}
	if !p.Field3DeepEqual(ano.LastLogIndex) {
		return false
	}
	if !p.Field4DeepEqual(ano.LastLogTerm) {
		return false
	}
	return true
}

func (p *RequestVoteReq) Field1DeepEqual(src int64) bool {

	if p.Term != src {
		return false
	}
	return true
}
func (p *RequestVoteReq) Field2DeepEqual(src int64) bool {

	if p.CandidateId != src {
		return false
	}
	return true
}
func (p *RequestVoteReq) Field3DeepEqual(src int64) bool {

	if p.LastLogIndex != src {
		return false
	}
	return true
}
func (p *RequestVoteReq) Field4DeepEqual(src int64) bool {

	if p.LastLogTerm != src {
		return false
	}
	return true
}

type RequestVoteResp struct {
	Term        int64          `thrift:"term,1" frugal:"1,default,i64" json:"term"`
	VoteGranted bool           `thrift:"voteGranted,2" frugal:"2,default,bool" json:"voteGranted"`
	Common      *common.Common `thrift:"common,3" frugal:"3,default,common.Common" json:"common"`
}

func NewRequestVoteResp() *RequestVoteResp {
	return &RequestVoteResp{}
}

func (p *RequestVoteResp) InitDefault() {
}

func (p *RequestVoteResp) GetTerm() (v int64) {
	return p.Term
}

func (p *RequestVoteResp) GetVoteGranted() (v bool) {
	return p.VoteGranted
}

var RequestVoteResp_Common_DEFAULT *common.Common

func (p *RequestVoteResp) GetCommon() (v *common.Common) {
	if !p.IsSetCommon() {
		return RequestVoteResp_Common_DEFAULT
	}
	return p.Common
}
func (p *RequestVoteResp) SetTerm(val int64) {
	p.Term = val
}
func (p *RequestVoteResp) SetVoteGranted(val bool) {
	p.VoteGranted = val
}
func (p *RequestVoteResp) SetCommon(val *common.Common) {
	p.Common = val
}

var fieldIDToName_RequestVoteResp = map[int16]string{
	1: "term",
	2: "voteGranted",
	3: "common",
}

func (p *RequestVoteResp) IsSetCommon() bool {
	return p.Common != nil
}

func (p *RequestVoteResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RequestVoteResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RequestVoteResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}
func (p *RequestVoteResp) ReadField2(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VoteGranted = _field
	return nil
}
func (p *RequestVoteResp) ReadField3(iprot thrift.TProtocol) error {
	_field := common.NewCommon()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Common = _field
	return nil
}

func (p *RequestVoteResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RequestVoteResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RequestVoteResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("term", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RequestVoteResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("voteGranted", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.VoteGranted); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RequestVoteResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("common", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Common.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RequestVoteResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestVoteResp(%+v)", *p)

}

func (p *RequestVoteResp) DeepEqual(ano *RequestVoteResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Term) {
		return false
	}
	if !p.Field2DeepEqual(ano.VoteGranted) {
		return false
	}
	if !p.Field3DeepEqual(ano.Common) {
		return false
	}
	return true
}

func (p *RequestVoteResp) Field1DeepEqual(src int64) bool {

	if p.Term != src {
		return false
	}
	return true
}
func (p *RequestVoteResp) Field2DeepEqual(src bool) bool {

	if p.VoteGranted != src {
		return false
	}
	return true
}
func (p *RequestVoteResp) Field3DeepEqual(src *common.Common) bool {

	if !p.Common.DeepEqual(src) {
		return false
	}
	return true
}

type AppendEntriesReq struct {
	Term         int64    `thrift:"term,1" frugal:"1,default,i64" json:"term"`
	LeaderId     int64    `thrift:"leaderId,2" frugal:"2,default,i64" json:"leaderId"`
	PrevLogIndex int64    `thrift:"prevLogIndex,3" frugal:"3,default,i64" json:"prevLogIndex"`
	PrevLogTerm  int64    `thrift:"prevLogTerm,4" frugal:"4,default,i64" json:"prevLogTerm"`
	Entries      []string `thrift:"entries,5" frugal:"5,default,list<string>" json:"entries"`
	LeaderCommit int64    `thrift:"leaderCommit,6" frugal:"6,default,i64" json:"leaderCommit"`
}

func NewAppendEntriesReq() *AppendEntriesReq {
	return &AppendEntriesReq{}
}

func (p *AppendEntriesReq) InitDefault() {
}

func (p *AppendEntriesReq) GetTerm() (v int64) {
	return p.Term
}

func (p *AppendEntriesReq) GetLeaderId() (v int64) {
	return p.LeaderId
}

func (p *AppendEntriesReq) GetPrevLogIndex() (v int64) {
	return p.PrevLogIndex
}

func (p *AppendEntriesReq) GetPrevLogTerm() (v int64) {
	return p.PrevLogTerm
}

func (p *AppendEntriesReq) GetEntries() (v []string) {
	return p.Entries
}

func (p *AppendEntriesReq) GetLeaderCommit() (v int64) {
	return p.LeaderCommit
}
func (p *AppendEntriesReq) SetTerm(val int64) {
	p.Term = val
}
func (p *AppendEntriesReq) SetLeaderId(val int64) {
	p.LeaderId = val
}
func (p *AppendEntriesReq) SetPrevLogIndex(val int64) {
	p.PrevLogIndex = val
}
func (p *AppendEntriesReq) SetPrevLogTerm(val int64) {
	p.PrevLogTerm = val
}
func (p *AppendEntriesReq) SetEntries(val []string) {
	p.Entries = val
}
func (p *AppendEntriesReq) SetLeaderCommit(val int64) {
	p.LeaderCommit = val
}

var fieldIDToName_AppendEntriesReq = map[int16]string{
	1: "term",
	2: "leaderId",
	3: "prevLogIndex",
	4: "prevLogTerm",
	5: "entries",
	6: "leaderCommit",
}

func (p *AppendEntriesReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppendEntriesReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppendEntriesReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}
func (p *AppendEntriesReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LeaderId = _field
	return nil
}
func (p *AppendEntriesReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PrevLogIndex = _field
	return nil
}
func (p *AppendEntriesReq) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PrevLogTerm = _field
	return nil
}
func (p *AppendEntriesReq) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Entries = _field
	return nil
}
func (p *AppendEntriesReq) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LeaderCommit = _field
	return nil
}

func (p *AppendEntriesReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("AppendEntriesReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppendEntriesReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("term", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppendEntriesReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("leaderId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LeaderId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AppendEntriesReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("prevLogIndex", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PrevLogIndex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AppendEntriesReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("prevLogTerm", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PrevLogTerm); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AppendEntriesReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("entries", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Entries)); err != nil {
		return err
	}
	for _, v := range p.Entries {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *AppendEntriesReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("leaderCommit", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LeaderCommit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *AppendEntriesReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendEntriesReq(%+v)", *p)

}

func (p *AppendEntriesReq) DeepEqual(ano *AppendEntriesReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Term) {
		return false
	}
	if !p.Field2DeepEqual(ano.LeaderId) {
		return false
	}
	if !p.Field3DeepEqual(ano.PrevLogIndex) {
		return false
	}
	if !p.Field4DeepEqual(ano.PrevLogTerm) {
		return false
	}
	if !p.Field5DeepEqual(ano.Entries) {
		return false
	}
	if !p.Field6DeepEqual(ano.LeaderCommit) {
		return false
	}
	return true
}

func (p *AppendEntriesReq) Field1DeepEqual(src int64) bool {

	if p.Term != src {
		return false
	}
	return true
}
func (p *AppendEntriesReq) Field2DeepEqual(src int64) bool {

	if p.LeaderId != src {
		return false
	}
	return true
}
func (p *AppendEntriesReq) Field3DeepEqual(src int64) bool {

	if p.PrevLogIndex != src {
		return false
	}
	return true
}
func (p *AppendEntriesReq) Field4DeepEqual(src int64) bool {

	if p.PrevLogTerm != src {
		return false
	}
	return true
}
func (p *AppendEntriesReq) Field5DeepEqual(src []string) bool {

	if len(p.Entries) != len(src) {
		return false
	}
	for i, v := range p.Entries {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *AppendEntriesReq) Field6DeepEqual(src int64) bool {

	if p.LeaderCommit != src {
		return false
	}
	return true
}

type AppendEntriesResp struct {
	Term    int64          `thrift:"term,1" frugal:"1,default,i64" json:"term"`
	Success bool           `thrift:"success,2" frugal:"2,default,bool" json:"success"`
	Common  *common.Common `thrift:"common,255" frugal:"255,default,common.Common" json:"common"`
}

func NewAppendEntriesResp() *AppendEntriesResp {
	return &AppendEntriesResp{}
}

func (p *AppendEntriesResp) InitDefault() {
}

func (p *AppendEntriesResp) GetTerm() (v int64) {
	return p.Term
}

func (p *AppendEntriesResp) GetSuccess() (v bool) {
	return p.Success
}

var AppendEntriesResp_Common_DEFAULT *common.Common

func (p *AppendEntriesResp) GetCommon() (v *common.Common) {
	if !p.IsSetCommon() {
		return AppendEntriesResp_Common_DEFAULT
	}
	return p.Common
}
func (p *AppendEntriesResp) SetTerm(val int64) {
	p.Term = val
}
func (p *AppendEntriesResp) SetSuccess(val bool) {
	p.Success = val
}
func (p *AppendEntriesResp) SetCommon(val *common.Common) {
	p.Common = val
}

var fieldIDToName_AppendEntriesResp = map[int16]string{
	1:   "term",
	2:   "success",
	255: "common",
}

func (p *AppendEntriesResp) IsSetCommon() bool {
	return p.Common != nil
}

func (p *AppendEntriesResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppendEntriesResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppendEntriesResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}
func (p *AppendEntriesResp) ReadField2(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Success = _field
	return nil
}
func (p *AppendEntriesResp) ReadField255(iprot thrift.TProtocol) error {
	_field := common.NewCommon()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Common = _field
	return nil
}

func (p *AppendEntriesResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("AppendEntriesResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppendEntriesResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("term", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppendEntriesResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("success", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Success); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AppendEntriesResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("common", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Common.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AppendEntriesResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendEntriesResp(%+v)", *p)

}

func (p *AppendEntriesResp) DeepEqual(ano *AppendEntriesResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Term) {
		return false
	}
	if !p.Field2DeepEqual(ano.Success) {
		return false
	}
	if !p.Field255DeepEqual(ano.Common) {
		return false
	}
	return true
}

func (p *AppendEntriesResp) Field1DeepEqual(src int64) bool {

	if p.Term != src {
		return false
	}
	return true
}
func (p *AppendEntriesResp) Field2DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}
func (p *AppendEntriesResp) Field255DeepEqual(src *common.Common) bool {

	if !p.Common.DeepEqual(src) {
		return false
	}
	return true
}

type Server interface {
	RequestVote(ctx context.Context, req *RequestVoteReq) (r *RequestVoteResp, err error)

	AppendEntries(ctx context.Context, req *AppendEntriesReq) (r *AppendEntriesResp, err error)
}

type ServerRequestVoteArgs struct {
	Req *RequestVoteReq `thrift:"req,1" frugal:"1,default,RequestVoteReq" json:"req"`
}

func NewServerRequestVoteArgs() *ServerRequestVoteArgs {
	return &ServerRequestVoteArgs{}
}

func (p *ServerRequestVoteArgs) InitDefault() {
}

var ServerRequestVoteArgs_Req_DEFAULT *RequestVoteReq

func (p *ServerRequestVoteArgs) GetReq() (v *RequestVoteReq) {
	if !p.IsSetReq() {
		return ServerRequestVoteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ServerRequestVoteArgs) SetReq(val *RequestVoteReq) {
	p.Req = val
}

var fieldIDToName_ServerRequestVoteArgs = map[int16]string{
	1: "req",
}

func (p *ServerRequestVoteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ServerRequestVoteArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ServerRequestVoteArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ServerRequestVoteArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRequestVoteReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ServerRequestVoteArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("requestVote_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ServerRequestVoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ServerRequestVoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerRequestVoteArgs(%+v)", *p)

}

func (p *ServerRequestVoteArgs) DeepEqual(ano *ServerRequestVoteArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ServerRequestVoteArgs) Field1DeepEqual(src *RequestVoteReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ServerRequestVoteResult struct {
	Success *RequestVoteResp `thrift:"success,0,optional" frugal:"0,optional,RequestVoteResp" json:"success,omitempty"`
}

func NewServerRequestVoteResult() *ServerRequestVoteResult {
	return &ServerRequestVoteResult{}
}

func (p *ServerRequestVoteResult) InitDefault() {
}

var ServerRequestVoteResult_Success_DEFAULT *RequestVoteResp

func (p *ServerRequestVoteResult) GetSuccess() (v *RequestVoteResp) {
	if !p.IsSetSuccess() {
		return ServerRequestVoteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ServerRequestVoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*RequestVoteResp)
}

var fieldIDToName_ServerRequestVoteResult = map[int16]string{
	0: "success",
}

func (p *ServerRequestVoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServerRequestVoteResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ServerRequestVoteResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ServerRequestVoteResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRequestVoteResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ServerRequestVoteResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("requestVote_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ServerRequestVoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ServerRequestVoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerRequestVoteResult(%+v)", *p)

}

func (p *ServerRequestVoteResult) DeepEqual(ano *ServerRequestVoteResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ServerRequestVoteResult) Field0DeepEqual(src *RequestVoteResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ServerAppendEntriesArgs struct {
	Req *AppendEntriesReq `thrift:"req,1" frugal:"1,default,AppendEntriesReq" json:"req"`
}

func NewServerAppendEntriesArgs() *ServerAppendEntriesArgs {
	return &ServerAppendEntriesArgs{}
}

func (p *ServerAppendEntriesArgs) InitDefault() {
}

var ServerAppendEntriesArgs_Req_DEFAULT *AppendEntriesReq

func (p *ServerAppendEntriesArgs) GetReq() (v *AppendEntriesReq) {
	if !p.IsSetReq() {
		return ServerAppendEntriesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ServerAppendEntriesArgs) SetReq(val *AppendEntriesReq) {
	p.Req = val
}

var fieldIDToName_ServerAppendEntriesArgs = map[int16]string{
	1: "req",
}

func (p *ServerAppendEntriesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ServerAppendEntriesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ServerAppendEntriesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ServerAppendEntriesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAppendEntriesReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ServerAppendEntriesArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("appendEntries_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ServerAppendEntriesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ServerAppendEntriesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerAppendEntriesArgs(%+v)", *p)

}

func (p *ServerAppendEntriesArgs) DeepEqual(ano *ServerAppendEntriesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ServerAppendEntriesArgs) Field1DeepEqual(src *AppendEntriesReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ServerAppendEntriesResult struct {
	Success *AppendEntriesResp `thrift:"success,0,optional" frugal:"0,optional,AppendEntriesResp" json:"success,omitempty"`
}

func NewServerAppendEntriesResult() *ServerAppendEntriesResult {
	return &ServerAppendEntriesResult{}
}

func (p *ServerAppendEntriesResult) InitDefault() {
}

var ServerAppendEntriesResult_Success_DEFAULT *AppendEntriesResp

func (p *ServerAppendEntriesResult) GetSuccess() (v *AppendEntriesResp) {
	if !p.IsSetSuccess() {
		return ServerAppendEntriesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ServerAppendEntriesResult) SetSuccess(x interface{}) {
	p.Success = x.(*AppendEntriesResp)
}

var fieldIDToName_ServerAppendEntriesResult = map[int16]string{
	0: "success",
}

func (p *ServerAppendEntriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServerAppendEntriesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ServerAppendEntriesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ServerAppendEntriesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewAppendEntriesResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ServerAppendEntriesResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("appendEntries_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ServerAppendEntriesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ServerAppendEntriesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerAppendEntriesResult(%+v)", *p)

}

func (p *ServerAppendEntriesResult) DeepEqual(ano *ServerAppendEntriesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ServerAppendEntriesResult) Field0DeepEqual(src *AppendEntriesResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
