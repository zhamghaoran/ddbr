// Code generated by Kitex v0.13.1. DO NOT EDIT.

package gateway

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	gateway "zhamghaoran/ddbr-server/kitex_gen/ddbr/rpc/gateway"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Set": kitex.NewMethodInfo(
		setHandler,
		newGatewaySetArgs,
		newGatewaySetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Get": kitex.NewMethodInfo(
		getHandler,
		newGatewayGetArgs,
		newGatewayGetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RegisterSever": kitex.NewMethodInfo(
		registerSeverHandler,
		newGatewayRegisterSeverArgs,
		newGatewayRegisterSeverResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RegisterGateway": kitex.NewMethodInfo(
		registerGatewayHandler,
		newGatewayRegisterGatewayArgs,
		newGatewayRegisterGatewayResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetLeader": kitex.NewMethodInfo(
		setLeaderHandler,
		newGatewaySetLeaderArgs,
		newGatewaySetLeaderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	gatewayServiceInfo                = NewServiceInfo()
	gatewayServiceInfoForClient       = NewServiceInfoForClient()
	gatewayServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return gatewayServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return gatewayServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return gatewayServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "Gateway"
	handlerType := (*gateway.Gateway)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "gateway",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func setHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*gateway.GatewaySetArgs)
	realResult := result.(*gateway.GatewaySetResult)
	success, err := handler.(gateway.Gateway).Set(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGatewaySetArgs() interface{} {
	return gateway.NewGatewaySetArgs()
}

func newGatewaySetResult() interface{} {
	return gateway.NewGatewaySetResult()
}

func getHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*gateway.GatewayGetArgs)
	realResult := result.(*gateway.GatewayGetResult)
	success, err := handler.(gateway.Gateway).Get(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGatewayGetArgs() interface{} {
	return gateway.NewGatewayGetArgs()
}

func newGatewayGetResult() interface{} {
	return gateway.NewGatewayGetResult()
}

func registerSeverHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*gateway.GatewayRegisterSeverArgs)
	realResult := result.(*gateway.GatewayRegisterSeverResult)
	success, err := handler.(gateway.Gateway).RegisterSever(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGatewayRegisterSeverArgs() interface{} {
	return gateway.NewGatewayRegisterSeverArgs()
}

func newGatewayRegisterSeverResult() interface{} {
	return gateway.NewGatewayRegisterSeverResult()
}

func registerGatewayHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*gateway.GatewayRegisterGatewayArgs)
	realResult := result.(*gateway.GatewayRegisterGatewayResult)
	success, err := handler.(gateway.Gateway).RegisterGateway(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGatewayRegisterGatewayArgs() interface{} {
	return gateway.NewGatewayRegisterGatewayArgs()
}

func newGatewayRegisterGatewayResult() interface{} {
	return gateway.NewGatewayRegisterGatewayResult()
}

func setLeaderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*gateway.GatewaySetLeaderArgs)
	realResult := result.(*gateway.GatewaySetLeaderResult)
	success, err := handler.(gateway.Gateway).SetLeader(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGatewaySetLeaderArgs() interface{} {
	return gateway.NewGatewaySetLeaderArgs()
}

func newGatewaySetLeaderResult() interface{} {
	return gateway.NewGatewaySetLeaderResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Set(ctx context.Context, req *gateway.SetRequest) (r *gateway.SetResponse, err error) {
	var _args gateway.GatewaySetArgs
	_args.Req = req
	var _result gateway.GatewaySetResult
	if err = p.c.Call(ctx, "Set", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Get(ctx context.Context, req *gateway.GetRequest) (r *gateway.GetResponse, err error) {
	var _args gateway.GatewayGetArgs
	_args.Req = req
	var _result gateway.GatewayGetResult
	if err = p.c.Call(ctx, "Get", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RegisterSever(ctx context.Context, req *gateway.RegisterSeverReq) (r *gateway.RegisterSeverResp, err error) {
	var _args gateway.GatewayRegisterSeverArgs
	_args.Req = req
	var _result gateway.GatewayRegisterSeverResult
	if err = p.c.Call(ctx, "RegisterSever", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RegisterGateway(ctx context.Context, req *gateway.RegisterGatewayReq) (r *gateway.RegisterGatewayResp, err error) {
	var _args gateway.GatewayRegisterGatewayArgs
	_args.Req = req
	var _result gateway.GatewayRegisterGatewayResult
	if err = p.c.Call(ctx, "RegisterGateway", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetLeader(ctx context.Context, req *gateway.SetLeaderReq) (r *gateway.SetLeaderResp, err error) {
	var _args gateway.GatewaySetLeaderArgs
	_args.Req = req
	var _result gateway.GatewaySetLeaderResult
	if err = p.c.Call(ctx, "SetLeader", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
