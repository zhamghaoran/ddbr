// Code generated by Kitex v0.13.1. DO NOT EDIT.

package server

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	sever "zhamghaoran/ddbr-gateway/kitex_gen/ddbr/rpc/sever"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	RequestVote(ctx context.Context, req *sever.RequestVoteReq, callOptions ...callopt.Option) (r *sever.RequestVoteResp, err error)
	AppendEntries(ctx context.Context, req *sever.AppendEntriesReq, callOptions ...callopt.Option) (r *sever.AppendEntriesResp, err error)
	HeartBeat(ctx context.Context, req *sever.HeartbeatReq, callOptions ...callopt.Option) (r *sever.Heartbeatresp, err error)
	JoinCluster(ctx context.Context, req *sever.JoinClusterReq, callOptions ...callopt.Option) (r *sever.JoinClusterResp, err error)
	SyncLogs(ctx context.Context, req *sever.LogSyncReq, callOptions ...callopt.Option) (r *sever.LogSyncResp, err error)
	Set(ctx context.Context, req *sever.SetReq, callOptions ...callopt.Option) (r *sever.SetResp, err error)
	Get(ctx context.Context, req *sever.GetReq, callOptions ...callopt.Option) (r *sever.GetResp, err error)
	Delete(ctx context.Context, req *sever.DeleteReq, callOptions ...callopt.Option) (r *sever.DeleteResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kServerClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kServerClient struct {
	*kClient
}

func (p *kServerClient) RequestVote(ctx context.Context, req *sever.RequestVoteReq, callOptions ...callopt.Option) (r *sever.RequestVoteResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RequestVote(ctx, req)
}

func (p *kServerClient) AppendEntries(ctx context.Context, req *sever.AppendEntriesReq, callOptions ...callopt.Option) (r *sever.AppendEntriesResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AppendEntries(ctx, req)
}

func (p *kServerClient) HeartBeat(ctx context.Context, req *sever.HeartbeatReq, callOptions ...callopt.Option) (r *sever.Heartbeatresp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.HeartBeat(ctx, req)
}

func (p *kServerClient) JoinCluster(ctx context.Context, req *sever.JoinClusterReq, callOptions ...callopt.Option) (r *sever.JoinClusterResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.JoinCluster(ctx, req)
}

func (p *kServerClient) SyncLogs(ctx context.Context, req *sever.LogSyncReq, callOptions ...callopt.Option) (r *sever.LogSyncResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SyncLogs(ctx, req)
}

func (p *kServerClient) Set(ctx context.Context, req *sever.SetReq, callOptions ...callopt.Option) (r *sever.SetResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Set(ctx, req)
}

func (p *kServerClient) Get(ctx context.Context, req *sever.GetReq, callOptions ...callopt.Option) (r *sever.GetResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Get(ctx, req)
}

func (p *kServerClient) Delete(ctx context.Context, req *sever.DeleteReq, callOptions ...callopt.Option) (r *sever.DeleteResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Delete(ctx, req)
}
