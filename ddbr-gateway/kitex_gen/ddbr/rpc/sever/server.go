// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package sever

import (
	"context"
	"fmt"
	"zhamghaoran/ddbr-gateway/kitex_gen/ddbr/rpc/common"
)

type RequestVoteReq struct {
	Term         int64 `thrift:"term,1" frugal:"1,default,i64" json:"term"`
	CandidateId  int64 `thrift:"candidateId,2" frugal:"2,default,i64" json:"candidateId"`
	LastLogIndex int64 `thrift:"lastLogIndex,3" frugal:"3,default,i64" json:"lastLogIndex"`
	LastLogTerm  int64 `thrift:"lastLogTerm,4" frugal:"4,default,i64" json:"lastLogTerm"`
}

func NewRequestVoteReq() *RequestVoteReq {
	return &RequestVoteReq{}
}

func (p *RequestVoteReq) InitDefault() {
}

func (p *RequestVoteReq) GetTerm() (v int64) {
	return p.Term
}

func (p *RequestVoteReq) GetCandidateId() (v int64) {
	return p.CandidateId
}

func (p *RequestVoteReq) GetLastLogIndex() (v int64) {
	return p.LastLogIndex
}

func (p *RequestVoteReq) GetLastLogTerm() (v int64) {
	return p.LastLogTerm
}
func (p *RequestVoteReq) SetTerm(val int64) {
	p.Term = val
}
func (p *RequestVoteReq) SetCandidateId(val int64) {
	p.CandidateId = val
}
func (p *RequestVoteReq) SetLastLogIndex(val int64) {
	p.LastLogIndex = val
}
func (p *RequestVoteReq) SetLastLogTerm(val int64) {
	p.LastLogTerm = val
}

func (p *RequestVoteReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestVoteReq(%+v)", *p)
}

var fieldIDToName_RequestVoteReq = map[int16]string{
	1: "term",
	2: "candidateId",
	3: "lastLogIndex",
	4: "lastLogTerm",
}

type RequestVoteResp struct {
	Term        int64          `thrift:"term,1" frugal:"1,default,i64" json:"term"`
	VoteGranted bool           `thrift:"voteGranted,2" frugal:"2,default,bool" json:"voteGranted"`
	Common      *common.Common `thrift:"common,3" frugal:"3,default,common.Common" json:"common"`
}

func NewRequestVoteResp() *RequestVoteResp {
	return &RequestVoteResp{}
}

func (p *RequestVoteResp) InitDefault() {
}

func (p *RequestVoteResp) GetTerm() (v int64) {
	return p.Term
}

func (p *RequestVoteResp) GetVoteGranted() (v bool) {
	return p.VoteGranted
}

var RequestVoteResp_Common_DEFAULT *common.Common

func (p *RequestVoteResp) GetCommon() (v *common.Common) {
	if !p.IsSetCommon() {
		return RequestVoteResp_Common_DEFAULT
	}
	return p.Common
}
func (p *RequestVoteResp) SetTerm(val int64) {
	p.Term = val
}
func (p *RequestVoteResp) SetVoteGranted(val bool) {
	p.VoteGranted = val
}
func (p *RequestVoteResp) SetCommon(val *common.Common) {
	p.Common = val
}

func (p *RequestVoteResp) IsSetCommon() bool {
	return p.Common != nil
}

func (p *RequestVoteResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestVoteResp(%+v)", *p)
}

var fieldIDToName_RequestVoteResp = map[int16]string{
	1: "term",
	2: "voteGranted",
	3: "common",
}

type AppendEntriesReq struct {
	Term         int64    `thrift:"term,1" frugal:"1,default,i64" json:"term"`
	LeaderId     int64    `thrift:"leaderId,2" frugal:"2,default,i64" json:"leaderId"`
	PrevLogIndex int64    `thrift:"prevLogIndex,3" frugal:"3,default,i64" json:"prevLogIndex"`
	PrevLogTerm  int64    `thrift:"prevLogTerm,4" frugal:"4,default,i64" json:"prevLogTerm"`
	Entries      []string `thrift:"entries,5" frugal:"5,default,list<string>" json:"entries"`
	LeaderCommit int64    `thrift:"leaderCommit,6" frugal:"6,default,i64" json:"leaderCommit"`
	IsPreCommit  bool     `thrift:"isPreCommit,7" frugal:"7,default,bool" json:"isPreCommit"`
}

func NewAppendEntriesReq() *AppendEntriesReq {
	return &AppendEntriesReq{}
}

func (p *AppendEntriesReq) InitDefault() {
}

func (p *AppendEntriesReq) GetTerm() (v int64) {
	return p.Term
}

func (p *AppendEntriesReq) GetLeaderId() (v int64) {
	return p.LeaderId
}

func (p *AppendEntriesReq) GetPrevLogIndex() (v int64) {
	return p.PrevLogIndex
}

func (p *AppendEntriesReq) GetPrevLogTerm() (v int64) {
	return p.PrevLogTerm
}

func (p *AppendEntriesReq) GetEntries() (v []string) {
	return p.Entries
}

func (p *AppendEntriesReq) GetLeaderCommit() (v int64) {
	return p.LeaderCommit
}

func (p *AppendEntriesReq) GetIsPreCommit() (v bool) {
	return p.IsPreCommit
}
func (p *AppendEntriesReq) SetTerm(val int64) {
	p.Term = val
}
func (p *AppendEntriesReq) SetLeaderId(val int64) {
	p.LeaderId = val
}
func (p *AppendEntriesReq) SetPrevLogIndex(val int64) {
	p.PrevLogIndex = val
}
func (p *AppendEntriesReq) SetPrevLogTerm(val int64) {
	p.PrevLogTerm = val
}
func (p *AppendEntriesReq) SetEntries(val []string) {
	p.Entries = val
}
func (p *AppendEntriesReq) SetLeaderCommit(val int64) {
	p.LeaderCommit = val
}
func (p *AppendEntriesReq) SetIsPreCommit(val bool) {
	p.IsPreCommit = val
}

func (p *AppendEntriesReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendEntriesReq(%+v)", *p)
}

var fieldIDToName_AppendEntriesReq = map[int16]string{
	1: "term",
	2: "leaderId",
	3: "prevLogIndex",
	4: "prevLogTerm",
	5: "entries",
	6: "leaderCommit",
	7: "isPreCommit",
}

type AppendEntriesResp struct {
	Term    int64 `thrift:"term,1" frugal:"1,default,i64" json:"term"`
	Success bool  `thrift:"success,2" frugal:"2,default,bool" json:"success"`
}

func NewAppendEntriesResp() *AppendEntriesResp {
	return &AppendEntriesResp{}
}

func (p *AppendEntriesResp) InitDefault() {
}

func (p *AppendEntriesResp) GetTerm() (v int64) {
	return p.Term
}

func (p *AppendEntriesResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *AppendEntriesResp) SetTerm(val int64) {
	p.Term = val
}
func (p *AppendEntriesResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *AppendEntriesResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendEntriesResp(%+v)", *p)
}

var fieldIDToName_AppendEntriesResp = map[int16]string{
	1: "term",
	2: "success",
}

type HeartbeatReq struct {
}

func NewHeartbeatReq() *HeartbeatReq {
	return &HeartbeatReq{}
}

func (p *HeartbeatReq) InitDefault() {
}

func (p *HeartbeatReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HeartbeatReq(%+v)", *p)
}

var fieldIDToName_HeartbeatReq = map[int16]string{}

type Heartbeatresp struct {
	Peers  []string       `thrift:"Peers,1" frugal:"1,default,list<string>" json:"Peers"`
	Common *common.Common `thrift:"common,255" frugal:"255,default,common.Common" json:"common"`
}

func NewHeartbeatresp() *Heartbeatresp {
	return &Heartbeatresp{}
}

func (p *Heartbeatresp) InitDefault() {
}

func (p *Heartbeatresp) GetPeers() (v []string) {
	return p.Peers
}

var Heartbeatresp_Common_DEFAULT *common.Common

func (p *Heartbeatresp) GetCommon() (v *common.Common) {
	if !p.IsSetCommon() {
		return Heartbeatresp_Common_DEFAULT
	}
	return p.Common
}
func (p *Heartbeatresp) SetPeers(val []string) {
	p.Peers = val
}
func (p *Heartbeatresp) SetCommon(val *common.Common) {
	p.Common = val
}

func (p *Heartbeatresp) IsSetCommon() bool {
	return p.Common != nil
}

func (p *Heartbeatresp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Heartbeatresp(%+v)", *p)
}

var fieldIDToName_Heartbeatresp = map[int16]string{
	1:   "Peers",
	255: "common",
}

type JoinClusterReq struct {
}

func NewJoinClusterReq() *JoinClusterReq {
	return &JoinClusterReq{}
}

func (p *JoinClusterReq) InitDefault() {
}

func (p *JoinClusterReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinClusterReq(%+v)", *p)
}

var fieldIDToName_JoinClusterReq = map[int16]string{}

type JoinClusterResp struct {
}

func NewJoinClusterResp() *JoinClusterResp {
	return &JoinClusterResp{}
}

func (p *JoinClusterResp) InitDefault() {
}

func (p *JoinClusterResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinClusterResp(%+v)", *p)
}

var fieldIDToName_JoinClusterResp = map[int16]string{}

type LogSyncReq struct {
	NodeId       int64 `thrift:"nodeId,1" frugal:"1,default,i64" json:"nodeId"`
	LastLogIndex int64 `thrift:"lastLogIndex,2" frugal:"2,default,i64" json:"lastLogIndex"`
	LastLogTerm  int64 `thrift:"lastLogTerm,3" frugal:"3,default,i64" json:"lastLogTerm"`
}

func NewLogSyncReq() *LogSyncReq {
	return &LogSyncReq{}
}

func (p *LogSyncReq) InitDefault() {
}

func (p *LogSyncReq) GetNodeId() (v int64) {
	return p.NodeId
}

func (p *LogSyncReq) GetLastLogIndex() (v int64) {
	return p.LastLogIndex
}

func (p *LogSyncReq) GetLastLogTerm() (v int64) {
	return p.LastLogTerm
}
func (p *LogSyncReq) SetNodeId(val int64) {
	p.NodeId = val
}
func (p *LogSyncReq) SetLastLogIndex(val int64) {
	p.LastLogIndex = val
}
func (p *LogSyncReq) SetLastLogTerm(val int64) {
	p.LastLogTerm = val
}

func (p *LogSyncReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogSyncReq(%+v)", *p)
}

var fieldIDToName_LogSyncReq = map[int16]string{
	1: "nodeId",
	2: "lastLogIndex",
	3: "lastLogTerm",
}

type LogSyncResp struct {
	Success  bool        `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Message  string      `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Entries  []*LogEntry `thrift:"entries,3" frugal:"3,default,list<LogEntry>" json:"entries"`
	LeaderId int64       `thrift:"leaderId,4" frugal:"4,default,i64" json:"leaderId"`
}

func NewLogSyncResp() *LogSyncResp {
	return &LogSyncResp{}
}

func (p *LogSyncResp) InitDefault() {
}

func (p *LogSyncResp) GetSuccess() (v bool) {
	return p.Success
}

func (p *LogSyncResp) GetMessage() (v string) {
	return p.Message
}

func (p *LogSyncResp) GetEntries() (v []*LogEntry) {
	return p.Entries
}

func (p *LogSyncResp) GetLeaderId() (v int64) {
	return p.LeaderId
}
func (p *LogSyncResp) SetSuccess(val bool) {
	p.Success = val
}
func (p *LogSyncResp) SetMessage(val string) {
	p.Message = val
}
func (p *LogSyncResp) SetEntries(val []*LogEntry) {
	p.Entries = val
}
func (p *LogSyncResp) SetLeaderId(val int64) {
	p.LeaderId = val
}

func (p *LogSyncResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogSyncResp(%+v)", *p)
}

var fieldIDToName_LogSyncResp = map[int16]string{
	1: "success",
	2: "message",
	3: "entries",
	4: "leaderId",
}

type LogEntry struct {
	Term         int64  `thrift:"term,1" frugal:"1,default,i64" json:"term"`
	Index        int64  `thrift:"index,2" frugal:"2,default,i64" json:"index"`
	Command      string `thrift:"command,3" frugal:"3,default,string" json:"command"`
	PreCommitted bool   `thrift:"preCommitted,4" frugal:"4,default,bool" json:"preCommitted"`
	IsRead       bool   `thrift:"isRead,5" frugal:"5,default,bool" json:"isRead"`
}

func NewLogEntry() *LogEntry {
	return &LogEntry{}
}

func (p *LogEntry) InitDefault() {
}

func (p *LogEntry) GetTerm() (v int64) {
	return p.Term
}

func (p *LogEntry) GetIndex() (v int64) {
	return p.Index
}

func (p *LogEntry) GetCommand() (v string) {
	return p.Command
}

func (p *LogEntry) GetPreCommitted() (v bool) {
	return p.PreCommitted
}

func (p *LogEntry) GetIsRead() (v bool) {
	return p.IsRead
}
func (p *LogEntry) SetTerm(val int64) {
	p.Term = val
}
func (p *LogEntry) SetIndex(val int64) {
	p.Index = val
}
func (p *LogEntry) SetCommand(val string) {
	p.Command = val
}
func (p *LogEntry) SetPreCommitted(val bool) {
	p.PreCommitted = val
}
func (p *LogEntry) SetIsRead(val bool) {
	p.IsRead = val
}

func (p *LogEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogEntry(%+v)", *p)
}

var fieldIDToName_LogEntry = map[int16]string{
	1: "term",
	2: "index",
	3: "command",
	4: "preCommitted",
	5: "isRead",
}

type SetReq struct {
	Key    string         `thrift:"key,1" frugal:"1,default,string" json:"key"`
	Value  string         `thrift:"value,2" frugal:"2,default,string" json:"value"`
	Common *common.Common `thrift:"common,255" frugal:"255,default,common.Common" json:"common"`
}

func NewSetReq() *SetReq {
	return &SetReq{}
}

func (p *SetReq) InitDefault() {
}

func (p *SetReq) GetKey() (v string) {
	return p.Key
}

func (p *SetReq) GetValue() (v string) {
	return p.Value
}

var SetReq_Common_DEFAULT *common.Common

func (p *SetReq) GetCommon() (v *common.Common) {
	if !p.IsSetCommon() {
		return SetReq_Common_DEFAULT
	}
	return p.Common
}
func (p *SetReq) SetKey(val string) {
	p.Key = val
}
func (p *SetReq) SetValue(val string) {
	p.Value = val
}
func (p *SetReq) SetCommon(val *common.Common) {
	p.Common = val
}

func (p *SetReq) IsSetCommon() bool {
	return p.Common != nil
}

func (p *SetReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetReq(%+v)", *p)
}

var fieldIDToName_SetReq = map[int16]string{
	1:   "key",
	2:   "value",
	255: "common",
}

type SetResp struct {
	Success bool           `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Message string         `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Common  *common.Common `thrift:"common,255" frugal:"255,default,common.Common" json:"common"`
}

func NewSetResp() *SetResp {
	return &SetResp{}
}

func (p *SetResp) InitDefault() {
}

func (p *SetResp) GetSuccess() (v bool) {
	return p.Success
}

func (p *SetResp) GetMessage() (v string) {
	return p.Message
}

var SetResp_Common_DEFAULT *common.Common

func (p *SetResp) GetCommon() (v *common.Common) {
	if !p.IsSetCommon() {
		return SetResp_Common_DEFAULT
	}
	return p.Common
}
func (p *SetResp) SetSuccess(val bool) {
	p.Success = val
}
func (p *SetResp) SetMessage(val string) {
	p.Message = val
}
func (p *SetResp) SetCommon(val *common.Common) {
	p.Common = val
}

func (p *SetResp) IsSetCommon() bool {
	return p.Common != nil
}

func (p *SetResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetResp(%+v)", *p)
}

var fieldIDToName_SetResp = map[int16]string{
	1:   "success",
	2:   "message",
	255: "common",
}

type GetReq struct {
	Key    string         `thrift:"key,1" frugal:"1,default,string" json:"key"`
	Common *common.Common `thrift:"common,255" frugal:"255,default,common.Common" json:"common"`
}

func NewGetReq() *GetReq {
	return &GetReq{}
}

func (p *GetReq) InitDefault() {
}

func (p *GetReq) GetKey() (v string) {
	return p.Key
}

var GetReq_Common_DEFAULT *common.Common

func (p *GetReq) GetCommon() (v *common.Common) {
	if !p.IsSetCommon() {
		return GetReq_Common_DEFAULT
	}
	return p.Common
}
func (p *GetReq) SetKey(val string) {
	p.Key = val
}
func (p *GetReq) SetCommon(val *common.Common) {
	p.Common = val
}

func (p *GetReq) IsSetCommon() bool {
	return p.Common != nil
}

func (p *GetReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReq(%+v)", *p)
}

var fieldIDToName_GetReq = map[int16]string{
	1:   "key",
	255: "common",
}

type GetResp struct {
	Success bool           `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Value   string         `thrift:"value,2" frugal:"2,default,string" json:"value"`
	Exists  bool           `thrift:"exists,3" frugal:"3,default,bool" json:"exists"`
	Common  *common.Common `thrift:"common,255" frugal:"255,default,common.Common" json:"common"`
}

func NewGetResp() *GetResp {
	return &GetResp{}
}

func (p *GetResp) InitDefault() {
}

func (p *GetResp) GetSuccess() (v bool) {
	return p.Success
}

func (p *GetResp) GetValue() (v string) {
	return p.Value
}

func (p *GetResp) GetExists() (v bool) {
	return p.Exists
}

var GetResp_Common_DEFAULT *common.Common

func (p *GetResp) GetCommon() (v *common.Common) {
	if !p.IsSetCommon() {
		return GetResp_Common_DEFAULT
	}
	return p.Common
}
func (p *GetResp) SetSuccess(val bool) {
	p.Success = val
}
func (p *GetResp) SetValue(val string) {
	p.Value = val
}
func (p *GetResp) SetExists(val bool) {
	p.Exists = val
}
func (p *GetResp) SetCommon(val *common.Common) {
	p.Common = val
}

func (p *GetResp) IsSetCommon() bool {
	return p.Common != nil
}

func (p *GetResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResp(%+v)", *p)
}

var fieldIDToName_GetResp = map[int16]string{
	1:   "success",
	2:   "value",
	3:   "exists",
	255: "common",
}

type DeleteReq struct {
	Key    string         `thrift:"key,1" frugal:"1,default,string" json:"key"`
	Common *common.Common `thrift:"common,255" frugal:"255,default,common.Common" json:"common"`
}

func NewDeleteReq() *DeleteReq {
	return &DeleteReq{}
}

func (p *DeleteReq) InitDefault() {
}

func (p *DeleteReq) GetKey() (v string) {
	return p.Key
}

var DeleteReq_Common_DEFAULT *common.Common

func (p *DeleteReq) GetCommon() (v *common.Common) {
	if !p.IsSetCommon() {
		return DeleteReq_Common_DEFAULT
	}
	return p.Common
}
func (p *DeleteReq) SetKey(val string) {
	p.Key = val
}
func (p *DeleteReq) SetCommon(val *common.Common) {
	p.Common = val
}

func (p *DeleteReq) IsSetCommon() bool {
	return p.Common != nil
}

func (p *DeleteReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteReq(%+v)", *p)
}

var fieldIDToName_DeleteReq = map[int16]string{
	1:   "key",
	255: "common",
}

type DeleteResp struct {
	Success bool           `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Message string         `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Common  *common.Common `thrift:"common,255" frugal:"255,default,common.Common" json:"common"`
}

func NewDeleteResp() *DeleteResp {
	return &DeleteResp{}
}

func (p *DeleteResp) InitDefault() {
}

func (p *DeleteResp) GetSuccess() (v bool) {
	return p.Success
}

func (p *DeleteResp) GetMessage() (v string) {
	return p.Message
}

var DeleteResp_Common_DEFAULT *common.Common

func (p *DeleteResp) GetCommon() (v *common.Common) {
	if !p.IsSetCommon() {
		return DeleteResp_Common_DEFAULT
	}
	return p.Common
}
func (p *DeleteResp) SetSuccess(val bool) {
	p.Success = val
}
func (p *DeleteResp) SetMessage(val string) {
	p.Message = val
}
func (p *DeleteResp) SetCommon(val *common.Common) {
	p.Common = val
}

func (p *DeleteResp) IsSetCommon() bool {
	return p.Common != nil
}

func (p *DeleteResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteResp(%+v)", *p)
}

var fieldIDToName_DeleteResp = map[int16]string{
	1:   "success",
	2:   "message",
	255: "common",
}

type Server interface {
	RequestVote(ctx context.Context, req *RequestVoteReq) (r *RequestVoteResp, err error)

	AppendEntries(ctx context.Context, req *AppendEntriesReq) (r *AppendEntriesResp, err error)

	HeartBeat(ctx context.Context, req *HeartbeatReq) (r *Heartbeatresp, err error)

	JoinCluster(ctx context.Context, req *JoinClusterReq) (r *JoinClusterResp, err error)

	SyncLogs(ctx context.Context, req *LogSyncReq) (r *LogSyncResp, err error)

	Set(ctx context.Context, req *SetReq) (r *SetResp, err error)

	Get(ctx context.Context, req *GetReq) (r *GetResp, err error)

	Delete(ctx context.Context, req *DeleteReq) (r *DeleteResp, err error)
}

type ServerRequestVoteArgs struct {
	Req *RequestVoteReq `thrift:"req,1" frugal:"1,default,RequestVoteReq" json:"req"`
}

func NewServerRequestVoteArgs() *ServerRequestVoteArgs {
	return &ServerRequestVoteArgs{}
}

func (p *ServerRequestVoteArgs) InitDefault() {
}

var ServerRequestVoteArgs_Req_DEFAULT *RequestVoteReq

func (p *ServerRequestVoteArgs) GetReq() (v *RequestVoteReq) {
	if !p.IsSetReq() {
		return ServerRequestVoteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ServerRequestVoteArgs) SetReq(val *RequestVoteReq) {
	p.Req = val
}

func (p *ServerRequestVoteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ServerRequestVoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerRequestVoteArgs(%+v)", *p)
}

var fieldIDToName_ServerRequestVoteArgs = map[int16]string{
	1: "req",
}

type ServerRequestVoteResult struct {
	Success *RequestVoteResp `thrift:"success,0,optional" frugal:"0,optional,RequestVoteResp" json:"success,omitempty"`
}

func NewServerRequestVoteResult() *ServerRequestVoteResult {
	return &ServerRequestVoteResult{}
}

func (p *ServerRequestVoteResult) InitDefault() {
}

var ServerRequestVoteResult_Success_DEFAULT *RequestVoteResp

func (p *ServerRequestVoteResult) GetSuccess() (v *RequestVoteResp) {
	if !p.IsSetSuccess() {
		return ServerRequestVoteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ServerRequestVoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*RequestVoteResp)
}

func (p *ServerRequestVoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServerRequestVoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerRequestVoteResult(%+v)", *p)
}

var fieldIDToName_ServerRequestVoteResult = map[int16]string{
	0: "success",
}

type ServerAppendEntriesArgs struct {
	Req *AppendEntriesReq `thrift:"req,1" frugal:"1,default,AppendEntriesReq" json:"req"`
}

func NewServerAppendEntriesArgs() *ServerAppendEntriesArgs {
	return &ServerAppendEntriesArgs{}
}

func (p *ServerAppendEntriesArgs) InitDefault() {
}

var ServerAppendEntriesArgs_Req_DEFAULT *AppendEntriesReq

func (p *ServerAppendEntriesArgs) GetReq() (v *AppendEntriesReq) {
	if !p.IsSetReq() {
		return ServerAppendEntriesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ServerAppendEntriesArgs) SetReq(val *AppendEntriesReq) {
	p.Req = val
}

func (p *ServerAppendEntriesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ServerAppendEntriesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerAppendEntriesArgs(%+v)", *p)
}

var fieldIDToName_ServerAppendEntriesArgs = map[int16]string{
	1: "req",
}

type ServerAppendEntriesResult struct {
	Success *AppendEntriesResp `thrift:"success,0,optional" frugal:"0,optional,AppendEntriesResp" json:"success,omitempty"`
}

func NewServerAppendEntriesResult() *ServerAppendEntriesResult {
	return &ServerAppendEntriesResult{}
}

func (p *ServerAppendEntriesResult) InitDefault() {
}

var ServerAppendEntriesResult_Success_DEFAULT *AppendEntriesResp

func (p *ServerAppendEntriesResult) GetSuccess() (v *AppendEntriesResp) {
	if !p.IsSetSuccess() {
		return ServerAppendEntriesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ServerAppendEntriesResult) SetSuccess(x interface{}) {
	p.Success = x.(*AppendEntriesResp)
}

func (p *ServerAppendEntriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServerAppendEntriesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerAppendEntriesResult(%+v)", *p)
}

var fieldIDToName_ServerAppendEntriesResult = map[int16]string{
	0: "success",
}

type ServerHeartBeatArgs struct {
	Req *HeartbeatReq `thrift:"req,1" frugal:"1,default,HeartbeatReq" json:"req"`
}

func NewServerHeartBeatArgs() *ServerHeartBeatArgs {
	return &ServerHeartBeatArgs{}
}

func (p *ServerHeartBeatArgs) InitDefault() {
}

var ServerHeartBeatArgs_Req_DEFAULT *HeartbeatReq

func (p *ServerHeartBeatArgs) GetReq() (v *HeartbeatReq) {
	if !p.IsSetReq() {
		return ServerHeartBeatArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ServerHeartBeatArgs) SetReq(val *HeartbeatReq) {
	p.Req = val
}

func (p *ServerHeartBeatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ServerHeartBeatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerHeartBeatArgs(%+v)", *p)
}

var fieldIDToName_ServerHeartBeatArgs = map[int16]string{
	1: "req",
}

type ServerHeartBeatResult struct {
	Success *Heartbeatresp `thrift:"success,0,optional" frugal:"0,optional,Heartbeatresp" json:"success,omitempty"`
}

func NewServerHeartBeatResult() *ServerHeartBeatResult {
	return &ServerHeartBeatResult{}
}

func (p *ServerHeartBeatResult) InitDefault() {
}

var ServerHeartBeatResult_Success_DEFAULT *Heartbeatresp

func (p *ServerHeartBeatResult) GetSuccess() (v *Heartbeatresp) {
	if !p.IsSetSuccess() {
		return ServerHeartBeatResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ServerHeartBeatResult) SetSuccess(x interface{}) {
	p.Success = x.(*Heartbeatresp)
}

func (p *ServerHeartBeatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServerHeartBeatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerHeartBeatResult(%+v)", *p)
}

var fieldIDToName_ServerHeartBeatResult = map[int16]string{
	0: "success",
}

type ServerJoinClusterArgs struct {
	Req *JoinClusterReq `thrift:"req,1" frugal:"1,default,JoinClusterReq" json:"req"`
}

func NewServerJoinClusterArgs() *ServerJoinClusterArgs {
	return &ServerJoinClusterArgs{}
}

func (p *ServerJoinClusterArgs) InitDefault() {
}

var ServerJoinClusterArgs_Req_DEFAULT *JoinClusterReq

func (p *ServerJoinClusterArgs) GetReq() (v *JoinClusterReq) {
	if !p.IsSetReq() {
		return ServerJoinClusterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ServerJoinClusterArgs) SetReq(val *JoinClusterReq) {
	p.Req = val
}

func (p *ServerJoinClusterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ServerJoinClusterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerJoinClusterArgs(%+v)", *p)
}

var fieldIDToName_ServerJoinClusterArgs = map[int16]string{
	1: "req",
}

type ServerJoinClusterResult struct {
	Success *JoinClusterResp `thrift:"success,0,optional" frugal:"0,optional,JoinClusterResp" json:"success,omitempty"`
}

func NewServerJoinClusterResult() *ServerJoinClusterResult {
	return &ServerJoinClusterResult{}
}

func (p *ServerJoinClusterResult) InitDefault() {
}

var ServerJoinClusterResult_Success_DEFAULT *JoinClusterResp

func (p *ServerJoinClusterResult) GetSuccess() (v *JoinClusterResp) {
	if !p.IsSetSuccess() {
		return ServerJoinClusterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ServerJoinClusterResult) SetSuccess(x interface{}) {
	p.Success = x.(*JoinClusterResp)
}

func (p *ServerJoinClusterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServerJoinClusterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerJoinClusterResult(%+v)", *p)
}

var fieldIDToName_ServerJoinClusterResult = map[int16]string{
	0: "success",
}

type ServerSyncLogsArgs struct {
	Req *LogSyncReq `thrift:"req,1" frugal:"1,default,LogSyncReq" json:"req"`
}

func NewServerSyncLogsArgs() *ServerSyncLogsArgs {
	return &ServerSyncLogsArgs{}
}

func (p *ServerSyncLogsArgs) InitDefault() {
}

var ServerSyncLogsArgs_Req_DEFAULT *LogSyncReq

func (p *ServerSyncLogsArgs) GetReq() (v *LogSyncReq) {
	if !p.IsSetReq() {
		return ServerSyncLogsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ServerSyncLogsArgs) SetReq(val *LogSyncReq) {
	p.Req = val
}

func (p *ServerSyncLogsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ServerSyncLogsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerSyncLogsArgs(%+v)", *p)
}

var fieldIDToName_ServerSyncLogsArgs = map[int16]string{
	1: "req",
}

type ServerSyncLogsResult struct {
	Success *LogSyncResp `thrift:"success,0,optional" frugal:"0,optional,LogSyncResp" json:"success,omitempty"`
}

func NewServerSyncLogsResult() *ServerSyncLogsResult {
	return &ServerSyncLogsResult{}
}

func (p *ServerSyncLogsResult) InitDefault() {
}

var ServerSyncLogsResult_Success_DEFAULT *LogSyncResp

func (p *ServerSyncLogsResult) GetSuccess() (v *LogSyncResp) {
	if !p.IsSetSuccess() {
		return ServerSyncLogsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ServerSyncLogsResult) SetSuccess(x interface{}) {
	p.Success = x.(*LogSyncResp)
}

func (p *ServerSyncLogsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServerSyncLogsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerSyncLogsResult(%+v)", *p)
}

var fieldIDToName_ServerSyncLogsResult = map[int16]string{
	0: "success",
}

type ServerSetArgs struct {
	Req *SetReq `thrift:"req,1" frugal:"1,default,SetReq" json:"req"`
}

func NewServerSetArgs() *ServerSetArgs {
	return &ServerSetArgs{}
}

func (p *ServerSetArgs) InitDefault() {
}

var ServerSetArgs_Req_DEFAULT *SetReq

func (p *ServerSetArgs) GetReq() (v *SetReq) {
	if !p.IsSetReq() {
		return ServerSetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ServerSetArgs) SetReq(val *SetReq) {
	p.Req = val
}

func (p *ServerSetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ServerSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerSetArgs(%+v)", *p)
}

var fieldIDToName_ServerSetArgs = map[int16]string{
	1: "req",
}

type ServerSetResult struct {
	Success *SetResp `thrift:"success,0,optional" frugal:"0,optional,SetResp" json:"success,omitempty"`
}

func NewServerSetResult() *ServerSetResult {
	return &ServerSetResult{}
}

func (p *ServerSetResult) InitDefault() {
}

var ServerSetResult_Success_DEFAULT *SetResp

func (p *ServerSetResult) GetSuccess() (v *SetResp) {
	if !p.IsSetSuccess() {
		return ServerSetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ServerSetResult) SetSuccess(x interface{}) {
	p.Success = x.(*SetResp)
}

func (p *ServerSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServerSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerSetResult(%+v)", *p)
}

var fieldIDToName_ServerSetResult = map[int16]string{
	0: "success",
}

type ServerGetArgs struct {
	Req *GetReq `thrift:"req,1" frugal:"1,default,GetReq" json:"req"`
}

func NewServerGetArgs() *ServerGetArgs {
	return &ServerGetArgs{}
}

func (p *ServerGetArgs) InitDefault() {
}

var ServerGetArgs_Req_DEFAULT *GetReq

func (p *ServerGetArgs) GetReq() (v *GetReq) {
	if !p.IsSetReq() {
		return ServerGetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ServerGetArgs) SetReq(val *GetReq) {
	p.Req = val
}

func (p *ServerGetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ServerGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerGetArgs(%+v)", *p)
}

var fieldIDToName_ServerGetArgs = map[int16]string{
	1: "req",
}

type ServerGetResult struct {
	Success *GetResp `thrift:"success,0,optional" frugal:"0,optional,GetResp" json:"success,omitempty"`
}

func NewServerGetResult() *ServerGetResult {
	return &ServerGetResult{}
}

func (p *ServerGetResult) InitDefault() {
}

var ServerGetResult_Success_DEFAULT *GetResp

func (p *ServerGetResult) GetSuccess() (v *GetResp) {
	if !p.IsSetSuccess() {
		return ServerGetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ServerGetResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetResp)
}

func (p *ServerGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServerGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerGetResult(%+v)", *p)
}

var fieldIDToName_ServerGetResult = map[int16]string{
	0: "success",
}

type ServerDeleteArgs struct {
	Req *DeleteReq `thrift:"req,1" frugal:"1,default,DeleteReq" json:"req"`
}

func NewServerDeleteArgs() *ServerDeleteArgs {
	return &ServerDeleteArgs{}
}

func (p *ServerDeleteArgs) InitDefault() {
}

var ServerDeleteArgs_Req_DEFAULT *DeleteReq

func (p *ServerDeleteArgs) GetReq() (v *DeleteReq) {
	if !p.IsSetReq() {
		return ServerDeleteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ServerDeleteArgs) SetReq(val *DeleteReq) {
	p.Req = val
}

func (p *ServerDeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ServerDeleteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerDeleteArgs(%+v)", *p)
}

var fieldIDToName_ServerDeleteArgs = map[int16]string{
	1: "req",
}

type ServerDeleteResult struct {
	Success *DeleteResp `thrift:"success,0,optional" frugal:"0,optional,DeleteResp" json:"success,omitempty"`
}

func NewServerDeleteResult() *ServerDeleteResult {
	return &ServerDeleteResult{}
}

func (p *ServerDeleteResult) InitDefault() {
}

var ServerDeleteResult_Success_DEFAULT *DeleteResp

func (p *ServerDeleteResult) GetSuccess() (v *DeleteResp) {
	if !p.IsSetSuccess() {
		return ServerDeleteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ServerDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteResp)
}

func (p *ServerDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServerDeleteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerDeleteResult(%+v)", *p)
}

var fieldIDToName_ServerDeleteResult = map[int16]string{
	0: "success",
}
