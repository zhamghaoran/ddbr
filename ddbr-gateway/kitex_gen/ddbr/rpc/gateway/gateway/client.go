// Code generated by Kitex v0.13.1. DO NOT EDIT.

package gateway

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	gateway "zhamghaoran/ddbr-gateway/kitex_gen/ddbr/rpc/gateway"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Set(ctx context.Context, req *gateway.SetRequest, callOptions ...callopt.Option) (r *gateway.SetResponse, err error)
	Get(ctx context.Context, req *gateway.GetRequest, callOptions ...callopt.Option) (r *gateway.GetResponse, err error)
	Delete(ctx context.Context, req *gateway.DeleteRequest, callOptions ...callopt.Option) (r *gateway.DeleteResponse, err error)
	RegisterSever(ctx context.Context, req *gateway.RegisterSeverReq, callOptions ...callopt.Option) (r *gateway.RegisterSeverResp, err error)
	RegisterGateway(ctx context.Context, req *gateway.RegisterGatewayReq, callOptions ...callopt.Option) (r *gateway.RegisterGatewayResp, err error)
	SetLeader(ctx context.Context, req *gateway.SetLeaderReq, callOptions ...callopt.Option) (r *gateway.SetLeaderResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kGatewayClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kGatewayClient struct {
	*kClient
}

func (p *kGatewayClient) Set(ctx context.Context, req *gateway.SetRequest, callOptions ...callopt.Option) (r *gateway.SetResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Set(ctx, req)
}

func (p *kGatewayClient) Get(ctx context.Context, req *gateway.GetRequest, callOptions ...callopt.Option) (r *gateway.GetResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Get(ctx, req)
}

func (p *kGatewayClient) Delete(ctx context.Context, req *gateway.DeleteRequest, callOptions ...callopt.Option) (r *gateway.DeleteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Delete(ctx, req)
}

func (p *kGatewayClient) RegisterSever(ctx context.Context, req *gateway.RegisterSeverReq, callOptions ...callopt.Option) (r *gateway.RegisterSeverResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RegisterSever(ctx, req)
}

func (p *kGatewayClient) RegisterGateway(ctx context.Context, req *gateway.RegisterGatewayReq, callOptions ...callopt.Option) (r *gateway.RegisterGatewayResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RegisterGateway(ctx, req)
}

func (p *kGatewayClient) SetLeader(ctx context.Context, req *gateway.SetLeaderReq, callOptions ...callopt.Option) (r *gateway.SetLeaderResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SetLeader(ctx, req)
}
