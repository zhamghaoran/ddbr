// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package gateway

import (
	"context"
	"fmt"
	"zhamghaoran/ddbr-gateway/kitex_gen/ddbr/rpc/common"
)

type SetRequest struct {
	Key      string           `thrift:"key,1" json:"key"`
	Val      string           `thrift:"val,2" json:"val"`
	Password *common.Password `thrift:"password,255" json:"password"`
}

func NewSetRequest() *SetRequest {
	return &SetRequest{}
}

func (p *SetRequest) InitDefault() {
}

func (p *SetRequest) GetKey() (v string) {
	return p.Key
}

func (p *SetRequest) GetVal() (v string) {
	return p.Val
}

var SetRequest_Password_DEFAULT *common.Password

func (p *SetRequest) GetPassword() (v *common.Password) {
	if !p.IsSetPassword() {
		return SetRequest_Password_DEFAULT
	}
	return p.Password
}
func (p *SetRequest) SetKey(val string) {
	p.Key = val
}
func (p *SetRequest) SetVal(val string) {
	p.Val = val
}
func (p *SetRequest) SetPassword(val *common.Password) {
	p.Password = val
}

func (p *SetRequest) IsSetPassword() bool {
	return p.Password != nil
}

func (p *SetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetRequest(%+v)", *p)
}

var fieldIDToName_SetRequest = map[int16]string{
	1:   "key",
	2:   "val",
	255: "password",
}

type SetResponse struct {
	Common *common.Common `thrift:"common,1" json:"common"`
}

func NewSetResponse() *SetResponse {
	return &SetResponse{}
}

func (p *SetResponse) InitDefault() {
}

var SetResponse_Common_DEFAULT *common.Common

func (p *SetResponse) GetCommon() (v *common.Common) {
	if !p.IsSetCommon() {
		return SetResponse_Common_DEFAULT
	}
	return p.Common
}
func (p *SetResponse) SetCommon(val *common.Common) {
	p.Common = val
}

func (p *SetResponse) IsSetCommon() bool {
	return p.Common != nil
}

func (p *SetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetResponse(%+v)", *p)
}

var fieldIDToName_SetResponse = map[int16]string{
	1: "common",
}

type GetRequest struct {
	Key      string           `thrift:"key,1" json:"key"`
	Password *common.Password `thrift:"password,2" json:"password"`
}

func NewGetRequest() *GetRequest {
	return &GetRequest{}
}

func (p *GetRequest) InitDefault() {
}

func (p *GetRequest) GetKey() (v string) {
	return p.Key
}

var GetRequest_Password_DEFAULT *common.Password

func (p *GetRequest) GetPassword() (v *common.Password) {
	if !p.IsSetPassword() {
		return GetRequest_Password_DEFAULT
	}
	return p.Password
}
func (p *GetRequest) SetKey(val string) {
	p.Key = val
}
func (p *GetRequest) SetPassword(val *common.Password) {
	p.Password = val
}

func (p *GetRequest) IsSetPassword() bool {
	return p.Password != nil
}

func (p *GetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRequest(%+v)", *p)
}

var fieldIDToName_GetRequest = map[int16]string{
	1: "key",
	2: "password",
}

type GetResponse struct {
	Val    string         `thrift:"val,1" json:"val"`
	Common *common.Common `thrift:"common,255" json:"common"`
}

func NewGetResponse() *GetResponse {
	return &GetResponse{}
}

func (p *GetResponse) InitDefault() {
}

func (p *GetResponse) GetVal() (v string) {
	return p.Val
}

var GetResponse_Common_DEFAULT *common.Common

func (p *GetResponse) GetCommon() (v *common.Common) {
	if !p.IsSetCommon() {
		return GetResponse_Common_DEFAULT
	}
	return p.Common
}
func (p *GetResponse) SetVal(val string) {
	p.Val = val
}
func (p *GetResponse) SetCommon(val *common.Common) {
	p.Common = val
}

func (p *GetResponse) IsSetCommon() bool {
	return p.Common != nil
}

func (p *GetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResponse(%+v)", *p)
}

var fieldIDToName_GetResponse = map[int16]string{
	1:   "val",
	255: "common",
}

type RegisterSeverReq struct {
	ServerHost string `thrift:"serverHost,1" json:"serverHost"`
}

func NewRegisterSeverReq() *RegisterSeverReq {
	return &RegisterSeverReq{}
}

func (p *RegisterSeverReq) InitDefault() {
}

func (p *RegisterSeverReq) GetServerHost() (v string) {
	return p.ServerHost
}
func (p *RegisterSeverReq) SetServerHost(val string) {
	p.ServerHost = val
}

func (p *RegisterSeverReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterSeverReq(%+v)", *p)
}

var fieldIDToName_RegisterSeverReq = map[int16]string{
	1: "serverHost",
}

type RegisterSeverResp struct {
	LeaderHost     string   `thrift:"leaderHost,1" json:"leaderHost"`
	SeverHostSever []string `thrift:"severHostSever,2" json:"severHostSever"`
}

func NewRegisterSeverResp() *RegisterSeverResp {
	return &RegisterSeverResp{}
}

func (p *RegisterSeverResp) InitDefault() {
}

func (p *RegisterSeverResp) GetLeaderHost() (v string) {
	return p.LeaderHost
}

func (p *RegisterSeverResp) GetSeverHostSever() (v []string) {
	return p.SeverHostSever
}
func (p *RegisterSeverResp) SetLeaderHost(val string) {
	p.LeaderHost = val
}
func (p *RegisterSeverResp) SetSeverHostSever(val []string) {
	p.SeverHostSever = val
}

func (p *RegisterSeverResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterSeverResp(%+v)", *p)
}

var fieldIDToName_RegisterSeverResp = map[int16]string{
	1: "leaderHost",
	2: "severHostSever",
}

type RegisterGatewayResp struct {
	Info *GatewayBasicInfo `thrift:"info,1" json:"info"`
}

func NewRegisterGatewayResp() *RegisterGatewayResp {
	return &RegisterGatewayResp{}
}

func (p *RegisterGatewayResp) InitDefault() {
}

var RegisterGatewayResp_Info_DEFAULT *GatewayBasicInfo

func (p *RegisterGatewayResp) GetInfo() (v *GatewayBasicInfo) {
	if !p.IsSetInfo() {
		return RegisterGatewayResp_Info_DEFAULT
	}
	return p.Info
}
func (p *RegisterGatewayResp) SetInfo(val *GatewayBasicInfo) {
	p.Info = val
}

func (p *RegisterGatewayResp) IsSetInfo() bool {
	return p.Info != nil
}

func (p *RegisterGatewayResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterGatewayResp(%+v)", *p)
}

var fieldIDToName_RegisterGatewayResp = map[int16]string{
	1: "info",
}

type GatewayBasicInfo struct {
	SeverHostSever []string         `thrift:"severHostSever,1" json:"severHostSever"`
	Password       *common.Password `thrift:"password,2" json:"password"`
}

func NewGatewayBasicInfo() *GatewayBasicInfo {
	return &GatewayBasicInfo{}
}

func (p *GatewayBasicInfo) InitDefault() {
}

func (p *GatewayBasicInfo) GetSeverHostSever() (v []string) {
	return p.SeverHostSever
}

var GatewayBasicInfo_Password_DEFAULT *common.Password

func (p *GatewayBasicInfo) GetPassword() (v *common.Password) {
	if !p.IsSetPassword() {
		return GatewayBasicInfo_Password_DEFAULT
	}
	return p.Password
}
func (p *GatewayBasicInfo) SetSeverHostSever(val []string) {
	p.SeverHostSever = val
}
func (p *GatewayBasicInfo) SetPassword(val *common.Password) {
	p.Password = val
}

func (p *GatewayBasicInfo) IsSetPassword() bool {
	return p.Password != nil
}

func (p *GatewayBasicInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GatewayBasicInfo(%+v)", *p)
}

var fieldIDToName_GatewayBasicInfo = map[int16]string{
	1: "severHostSever",
	2: "password",
}

type RegisterGatewayReq struct {
}

func NewRegisterGatewayReq() *RegisterGatewayReq {
	return &RegisterGatewayReq{}
}

func (p *RegisterGatewayReq) InitDefault() {
}

func (p *RegisterGatewayReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterGatewayReq(%+v)", *p)
}

var fieldIDToName_RegisterGatewayReq = map[int16]string{}

type SetLeaderResp struct {
	SeverHostSever []string `thrift:"severHostSever,1" json:"severHostSever"`
}

func NewSetLeaderResp() *SetLeaderResp {
	return &SetLeaderResp{}
}

func (p *SetLeaderResp) InitDefault() {
}

func (p *SetLeaderResp) GetSeverHostSever() (v []string) {
	return p.SeverHostSever
}
func (p *SetLeaderResp) SetSeverHostSever(val []string) {
	p.SeverHostSever = val
}

func (p *SetLeaderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetLeaderResp(%+v)", *p)
}

var fieldIDToName_SetLeaderResp = map[int16]string{
	1: "severHostSever",
}

type SetLeaderReq struct {
	LeaderHost string `thrift:"leaderHost,1" json:"leaderHost"`
}

func NewSetLeaderReq() *SetLeaderReq {
	return &SetLeaderReq{}
}

func (p *SetLeaderReq) InitDefault() {
}

func (p *SetLeaderReq) GetLeaderHost() (v string) {
	return p.LeaderHost
}
func (p *SetLeaderReq) SetLeaderHost(val string) {
	p.LeaderHost = val
}

func (p *SetLeaderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetLeaderReq(%+v)", *p)
}

var fieldIDToName_SetLeaderReq = map[int16]string{
	1: "leaderHost",
}

type Gateway interface {
	Set(ctx context.Context, req *SetRequest) (r *SetResponse, err error)

	Get(ctx context.Context, req *GetRequest) (r *GetResponse, err error)

	RegisterSever(ctx context.Context, req *RegisterSeverReq) (r *RegisterSeverResp, err error)

	RegisterGateway(ctx context.Context, req *RegisterGatewayReq) (r *RegisterGatewayResp, err error)

	SetLeader(ctx context.Context, req *SetLeaderReq) (r *SetLeaderResp, err error)
}

type GatewaySetArgs struct {
	Req *SetRequest `thrift:"req,1" json:"req"`
}

func NewGatewaySetArgs() *GatewaySetArgs {
	return &GatewaySetArgs{}
}

func (p *GatewaySetArgs) InitDefault() {
}

var GatewaySetArgs_Req_DEFAULT *SetRequest

func (p *GatewaySetArgs) GetReq() (v *SetRequest) {
	if !p.IsSetReq() {
		return GatewaySetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GatewaySetArgs) SetReq(val *SetRequest) {
	p.Req = val
}

func (p *GatewaySetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GatewaySetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GatewaySetArgs(%+v)", *p)
}

var fieldIDToName_GatewaySetArgs = map[int16]string{
	1: "req",
}

type GatewaySetResult struct {
	Success *SetResponse `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewGatewaySetResult() *GatewaySetResult {
	return &GatewaySetResult{}
}

func (p *GatewaySetResult) InitDefault() {
}

var GatewaySetResult_Success_DEFAULT *SetResponse

func (p *GatewaySetResult) GetSuccess() (v *SetResponse) {
	if !p.IsSetSuccess() {
		return GatewaySetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GatewaySetResult) SetSuccess(x interface{}) {
	p.Success = x.(*SetResponse)
}

func (p *GatewaySetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GatewaySetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GatewaySetResult(%+v)", *p)
}

var fieldIDToName_GatewaySetResult = map[int16]string{
	0: "success",
}

type GatewayGetArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewGatewayGetArgs() *GatewayGetArgs {
	return &GatewayGetArgs{}
}

func (p *GatewayGetArgs) InitDefault() {
}

var GatewayGetArgs_Req_DEFAULT *GetRequest

func (p *GatewayGetArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return GatewayGetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GatewayGetArgs) SetReq(val *GetRequest) {
	p.Req = val
}

func (p *GatewayGetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GatewayGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GatewayGetArgs(%+v)", *p)
}

var fieldIDToName_GatewayGetArgs = map[int16]string{
	1: "req",
}

type GatewayGetResult struct {
	Success *GetResponse `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewGatewayGetResult() *GatewayGetResult {
	return &GatewayGetResult{}
}

func (p *GatewayGetResult) InitDefault() {
}

var GatewayGetResult_Success_DEFAULT *GetResponse

func (p *GatewayGetResult) GetSuccess() (v *GetResponse) {
	if !p.IsSetSuccess() {
		return GatewayGetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GatewayGetResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetResponse)
}

func (p *GatewayGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GatewayGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GatewayGetResult(%+v)", *p)
}

var fieldIDToName_GatewayGetResult = map[int16]string{
	0: "success",
}

type GatewayRegisterSeverArgs struct {
	Req *RegisterSeverReq `thrift:"req,1" json:"req"`
}

func NewGatewayRegisterSeverArgs() *GatewayRegisterSeverArgs {
	return &GatewayRegisterSeverArgs{}
}

func (p *GatewayRegisterSeverArgs) InitDefault() {
}

var GatewayRegisterSeverArgs_Req_DEFAULT *RegisterSeverReq

func (p *GatewayRegisterSeverArgs) GetReq() (v *RegisterSeverReq) {
	if !p.IsSetReq() {
		return GatewayRegisterSeverArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GatewayRegisterSeverArgs) SetReq(val *RegisterSeverReq) {
	p.Req = val
}

func (p *GatewayRegisterSeverArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GatewayRegisterSeverArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GatewayRegisterSeverArgs(%+v)", *p)
}

var fieldIDToName_GatewayRegisterSeverArgs = map[int16]string{
	1: "req",
}

type GatewayRegisterSeverResult struct {
	Success *RegisterSeverResp `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewGatewayRegisterSeverResult() *GatewayRegisterSeverResult {
	return &GatewayRegisterSeverResult{}
}

func (p *GatewayRegisterSeverResult) InitDefault() {
}

var GatewayRegisterSeverResult_Success_DEFAULT *RegisterSeverResp

func (p *GatewayRegisterSeverResult) GetSuccess() (v *RegisterSeverResp) {
	if !p.IsSetSuccess() {
		return GatewayRegisterSeverResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GatewayRegisterSeverResult) SetSuccess(x interface{}) {
	p.Success = x.(*RegisterSeverResp)
}

func (p *GatewayRegisterSeverResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GatewayRegisterSeverResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GatewayRegisterSeverResult(%+v)", *p)
}

var fieldIDToName_GatewayRegisterSeverResult = map[int16]string{
	0: "success",
}

type GatewayRegisterGatewayArgs struct {
	Req *RegisterGatewayReq `thrift:"req,1" json:"req"`
}

func NewGatewayRegisterGatewayArgs() *GatewayRegisterGatewayArgs {
	return &GatewayRegisterGatewayArgs{}
}

func (p *GatewayRegisterGatewayArgs) InitDefault() {
}

var GatewayRegisterGatewayArgs_Req_DEFAULT *RegisterGatewayReq

func (p *GatewayRegisterGatewayArgs) GetReq() (v *RegisterGatewayReq) {
	if !p.IsSetReq() {
		return GatewayRegisterGatewayArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GatewayRegisterGatewayArgs) SetReq(val *RegisterGatewayReq) {
	p.Req = val
}

func (p *GatewayRegisterGatewayArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GatewayRegisterGatewayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GatewayRegisterGatewayArgs(%+v)", *p)
}

var fieldIDToName_GatewayRegisterGatewayArgs = map[int16]string{
	1: "req",
}

type GatewayRegisterGatewayResult struct {
	Success *RegisterGatewayResp `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewGatewayRegisterGatewayResult() *GatewayRegisterGatewayResult {
	return &GatewayRegisterGatewayResult{}
}

func (p *GatewayRegisterGatewayResult) InitDefault() {
}

var GatewayRegisterGatewayResult_Success_DEFAULT *RegisterGatewayResp

func (p *GatewayRegisterGatewayResult) GetSuccess() (v *RegisterGatewayResp) {
	if !p.IsSetSuccess() {
		return GatewayRegisterGatewayResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GatewayRegisterGatewayResult) SetSuccess(x interface{}) {
	p.Success = x.(*RegisterGatewayResp)
}

func (p *GatewayRegisterGatewayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GatewayRegisterGatewayResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GatewayRegisterGatewayResult(%+v)", *p)
}

var fieldIDToName_GatewayRegisterGatewayResult = map[int16]string{
	0: "success",
}

type GatewaySetLeaderArgs struct {
	Req *SetLeaderReq `thrift:"req,1" json:"req"`
}

func NewGatewaySetLeaderArgs() *GatewaySetLeaderArgs {
	return &GatewaySetLeaderArgs{}
}

func (p *GatewaySetLeaderArgs) InitDefault() {
}

var GatewaySetLeaderArgs_Req_DEFAULT *SetLeaderReq

func (p *GatewaySetLeaderArgs) GetReq() (v *SetLeaderReq) {
	if !p.IsSetReq() {
		return GatewaySetLeaderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GatewaySetLeaderArgs) SetReq(val *SetLeaderReq) {
	p.Req = val
}

func (p *GatewaySetLeaderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GatewaySetLeaderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GatewaySetLeaderArgs(%+v)", *p)
}

var fieldIDToName_GatewaySetLeaderArgs = map[int16]string{
	1: "req",
}

type GatewaySetLeaderResult struct {
	Success *SetLeaderResp `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewGatewaySetLeaderResult() *GatewaySetLeaderResult {
	return &GatewaySetLeaderResult{}
}

func (p *GatewaySetLeaderResult) InitDefault() {
}

var GatewaySetLeaderResult_Success_DEFAULT *SetLeaderResp

func (p *GatewaySetLeaderResult) GetSuccess() (v *SetLeaderResp) {
	if !p.IsSetSuccess() {
		return GatewaySetLeaderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GatewaySetLeaderResult) SetSuccess(x interface{}) {
	p.Success = x.(*SetLeaderResp)
}

func (p *GatewaySetLeaderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GatewaySetLeaderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GatewaySetLeaderResult(%+v)", *p)
}

var fieldIDToName_GatewaySetLeaderResult = map[int16]string{
	0: "success",
}
